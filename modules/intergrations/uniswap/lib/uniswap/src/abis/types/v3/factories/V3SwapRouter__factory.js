"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.V3SwapRouter__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "FromAddressIsNotOwner",
        type: "error",
    },
    {
        inputs: [],
        name: "InsufficientETH",
        type: "error",
    },
    {
        inputs: [],
        name: "InsufficientToken",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidBips",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidSpender",
        type: "error",
    },
    {
        inputs: [],
        name: "SliceOutOfBounds",
        type: "error",
    },
    {
        inputs: [],
        name: "UnsafeCast",
        type: "error",
    },
    {
        inputs: [],
        name: "V3InvalidAmountOut",
        type: "error",
    },
    {
        inputs: [],
        name: "V3InvalidCaller",
        type: "error",
    },
    {
        inputs: [],
        name: "V3InvalidSwap",
        type: "error",
    },
    {
        inputs: [],
        name: "V3TooLittleReceived",
        type: "error",
    },
    {
        inputs: [],
        name: "V3TooMuchRequested",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "amount0Delta",
                type: "int256",
            },
            {
                internalType: "int256",
                name: "amount1Delta",
                type: "int256",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "uniswapV3SwapCallback",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class V3SwapRouter__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.V3SwapRouter__factory = V3SwapRouter__factory;
V3SwapRouter__factory.abi = _abi;
